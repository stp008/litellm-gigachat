#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ LiteLLM GigaChat
"""

import logging
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.litellm_gigachat.core import get_global_token_manager, get_gigachat_token
from src.litellm_gigachat.callbacks import get_gigachat_callback
import litellm

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

def test_token_manager():
    """–¢–µ—Å—Ç TokenManager"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TokenManager ===")
    
    try:
        manager = get_global_token_manager()
        print("‚úì TokenManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        token = manager.get_token()
        print(f"‚úì –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        
        info = manager.get_token_info()
        print(f"‚úì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:")
        print(f"  - –ï—Å—Ç—å —Ç–æ–∫–µ–Ω: {info['has_token']}")
        print(f"  - –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {info['expires_in_seconds']:.0f} —Å–µ–∫—É–Ω–¥")
        print(f"  - –ò—Å—Ç–µ–∫: {info['is_expired']}")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ TokenManager: {e}")
        return False

def test_callback():
    """–¢–µ—Å—Ç GigaChatTokenCallback"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChatTokenCallback ===")
    
    try:
        callback = get_gigachat_callback()
        print("‚úì Callback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ GigaChat –º–æ–¥–µ–ª–∏
        test_cases = [
            ('gigachat', {}, True),
            ('gigachat-pro', {}, True),
            ('gpt-4', {}, False),
            ('test', {'api_base': 'https://gigachat.devices.sberbank.ru/api/v1'}, True)
        ]
        
        for model, kwargs, expected in test_cases:
            is_gigachat = callback._is_gigachat_model(model, kwargs)
            status = "‚úì" if is_gigachat == expected else "‚úó"
            print(f"  {status} –ú–æ–¥–µ–ª—å '{model}': {'GigaChat' if is_gigachat else '–ù–µ GigaChat'}")
            if is_gigachat != expected:
                return False
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ Callback: {e}")
        return False

def test_direct_api_call():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ GigaChat API"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ GigaChat API ===")
    
    try:
        token = get_gigachat_token()
        print(f"‚úì –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        
        response = litellm.completion(
            model='openai/GigaChat',
            api_base='https://gigachat.devices.sberbank.ru/api/v1',
            api_key=token,
            messages=[{'role': 'user', 'content': '–°–∫–∞–∂–∏ "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω" –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º'}],
            max_tokens=10
        )
        
        answer = response.choices[0].message.content.strip()
        print(f"‚úì –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚úì –û—Ç–≤–µ—Ç GigaChat: {answer}")
        
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ API –≤—ã–∑–æ–≤–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LiteLLM GigaChat –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    tests = [
        ("TokenManager", test_token_manager),
        ("Callback", test_callback),
        ("Direct API", test_direct_api_call)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úì {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚úó {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚úó {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
