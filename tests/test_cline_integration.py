#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cline - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
—Å –∑–∞–ø—Ä–æ—Å–∞–º–∏, –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞ —Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Cline
"""

import requests
import json
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_cline_like_request():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ç–æ—Ç, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Cline"""
    
    # URL –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
    proxy_url = "http://localhost:4000/v1/chat/completions"
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Cline
    request_data = {
        "model": "gigachat",
        "messages": [
            {
                "role": "system",
                "content": [
                    {
                        "type": "text",
                        "text": "You are Cline, a highly skilled software engineer with extensive knowledge in many programming languages, frameworks, design patterns, and best practices."
                    }
                ]
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "text", 
                        "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å Python –∫–æ–¥–æ–º?"
                    }
                ]
            }
        ],
        "temperature": 0,
        "stream": False
    }
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer any-key"  # –¢–æ–∫–µ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
    
    try:
        logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ GigaChat —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...")
        logger.info(f"URL: {proxy_url}")
        logger.info(f"–ú–æ–¥–µ–ª—å: {request_data['model']}")
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(request_data['messages'])}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            proxy_url,
            headers=headers,
            json=request_data,
            timeout=60
        )
        
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if "choices" in result and len(result["choices"]) > 0:
                message_content = result["choices"][0]["message"]["content"]
                logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                logger.info(f"üìù –û—Ç–≤–µ—Ç GigaChat: {message_content[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (—á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É)
                if any(ord(char) > 127 for char in message_content):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
                    logger.info("üá∑üá∫ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                return True
            else:
                logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞")
                logger.error(f"–û—Ç–≤–µ—Ç: {result}")
                return False
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            logger.error(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—É")
        logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω: python3 start_proxy.py")
        return False
    except requests.exceptions.Timeout:
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_simple_request():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    
    proxy_url = "http://localhost:4000/v1/chat/completions"
    
    request_data = {
        "model": "gigachat",
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            }
        ],
        "temperature": 0,
        "stream": False
    }
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer any-key"
    }
    
    try:
        logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...")
        
        response = requests.post(
            proxy_url,
            headers=headers,
            json=request_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            message_content = result["choices"][0]["message"]["content"]
            logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            logger.info(f"üìù –û—Ç–≤–µ—Ç: {message_content[:100]}...")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Cline —Å GigaChat")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏
    try:
        response = requests.get("http://localhost:4000/health", timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ 200")
    except:
        logger.error("‚ùå –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        logger.error("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–∫—Å–∏: python3 start_proxy.py")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    logger.info("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
    simple_success = test_simple_request()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Cline-–ø–æ–¥–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    logger.info("\nüìã –¢–µ—Å—Ç 2: Cline-–ø–æ–¥–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    cline_success = test_cline_like_request()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   üîπ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {'‚úÖ –£—Å–ø–µ—Ö' if simple_success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   üîπ Cline-–∑–∞–ø—Ä–æ—Å: {'‚úÖ –£—Å–ø–µ—Ö' if cline_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if simple_success and cline_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cline —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GigaChat —á–µ—Ä–µ–∑ Cline –±–µ–∑ –æ—à–∏–±–æ–∫ 'invalid JSON syntax'")
        return True
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
