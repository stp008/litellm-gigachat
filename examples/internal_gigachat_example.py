#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GigaChat

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —É—Å—Ç–∞–Ω–æ–≤–∫—É GigaChat
—Å –∫–∞—Å—Ç–æ–º–Ω—ã–º URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""

import os
import sys
import logging
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def setup_internal_gigachat_environment():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GigaChat
    """
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GigaChat...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    os.environ['GIGACHAT_INTERNAL_ENABLED'] = 'true'
    os.environ['GIGACHAT_INTERNAL_URL'] = 'https://my-gigachat.company.com/api/v1'
    os.environ['GIGACHAT_AUTH_HEADER_NAME'] = 'X-Client-Id'
    os.environ['GIGACHAT_AUTH_HEADER_VALUE'] = 'bddcba1a-6139-4b5f-9994-90f1b74e9109'
    os.environ['GIGACHAT_INTERNAL_MODEL_SUFFIX'] = 'internal'
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
    print(f"   URL: {os.environ['GIGACHAT_INTERNAL_URL']}")
    print(f"   Header: {os.environ['GIGACHAT_AUTH_HEADER_NAME']}")
    print(f"   Suffix: {os.environ['GIGACHAT_INTERNAL_MODEL_SUFFIX']}")

def test_internal_header_manager():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ InternalHeaderManager
    """
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ InternalHeaderManager...")
    
    from litellm_gigachat.core.internal_header_manager import (
        InternalHeaderManager,
        get_global_internal_header_manager,
        get_internal_auth_headers,
        is_internal_gigachat_enabled
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = InternalHeaderManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"‚úÖ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞: {manager.is_enabled()}")
    print(f"‚úÖ URL: {manager.get_internal_url()}")
    print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {manager.get_auth_headers()}")
    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {manager.get_model_names()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    is_valid = manager.validate_configuration()
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {is_valid}")
    
    if not is_valid:
        print("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞!")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    test_models = [
        ('gigachat-internal', True),
        ('gigachat-pro-internal', True),
        ('gigachat-max-internal', True),
        ('gigachat', False),
        ('gpt-4', False)
    ]
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π:")
    for model, expected in test_models:
        result = manager.is_internal_model(model)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} {model}: {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
    
    return True

def test_internal_header_callback():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ InternalHeaderCallback
    """
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ InternalHeaderCallback...")
    
    from litellm_gigachat.callbacks.internal_header_callback import (
        InternalHeaderCallback,
        get_internal_header_callback
    )
    
    # –°–æ–∑–¥–∞–µ–º callback
    callback = InternalHeaderCallback()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π
    test_cases = [
        ('gigachat-internal', {}, True),
        ('gigachat-pro-internal', {}, True),
        ('gigachat', {}, False),
        ('some-model', {'api_base': 'https://my-gigachat.company.com/api/v1'}, True),
        ('some-model', {'api_base': 'https://other.example.com'}, False)
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ callback:")
    for model, kwargs, expected in test_cases:
        result = callback._is_internal_gigachat_model(model, kwargs)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} {model} ({kwargs}): {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
    
    return True

def demonstrate_openai_usage():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI API
    """
    print("\nüåê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI API...")
    print("üìù –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π:")
    
    example_code = '''
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏
client = openai.OpenAI(
    base_url="http://localhost:4000",  # URL –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
    api_key="any-key"                  # –õ—é–±–æ–π –∫–ª—é—á, –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–æ–¥–µ–ª–∏
response = client.chat.completions.create(
    model="gigachat-internal",  # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º–æ–¥–µ–ª—å
    messages=[
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
    ]
)

print(response.choices[0].message.content)
'''
    
    print(example_code)

def demonstrate_litellm_usage():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ LiteLLM
    """
    print("\n‚ö° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ LiteLLM...")
    print("üìù –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LiteLLM:")
    
    example_code = '''
import litellm
from litellm_gigachat import setup_litellm_internal_gigachat_integration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
setup_litellm_internal_gigachat_integration()

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–æ–¥–µ–ª–∏
response = litellm.completion(
    model="openai/GigaChat",
    api_base="https://my-gigachat.company.com/api/v1",  # –ë—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    api_key="none",                                      # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}],
    extra_headers={"X-Client-Id": "your-client-id"}     # –î–æ–±–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
)

print(response.choices[0].message.content)
'''
    
    print(example_code)

def show_configuration_info():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    
    from litellm_gigachat.core.internal_header_manager import get_global_internal_header_manager
    
    manager = get_global_internal_header_manager()
    config_info = manager.get_configuration_info()
    
    print("üîß –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    for key, value in config_info.items():
        if key == 'has_header_value':
            value_str = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if value else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        elif key == 'is_valid':
            value_str = "‚úÖ –í–∞–ª–∏–¥–Ω–∞" if value else "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞"
        elif key == 'enabled':
            value_str = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if value else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
        else:
            value_str = str(value)
        
        print(f"   {key}: {value_str}")

def show_proxy_startup_instructions():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
    """
    print("\nüöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞:")
    print("=" * 60)
    
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
    print("   export GIGACHAT_INTERNAL_ENABLED=true")
    print("   export GIGACHAT_INTERNAL_URL=https://my-gigachat.company.com/api/v1")
    print("   export GIGACHAT_AUTH_HEADER_NAME=X-Client-Id")
    print("   export GIGACHAT_AUTH_HEADER_VALUE=bddcba1a-6139-4b5f-9994-90f1b74e9109")
    print("   export GIGACHAT_INTERNAL_MODEL_SUFFIX=internal")
    
    print("\n2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä:")
    print("   litellm-gigachat")
    print("   # –∏–ª–∏")
    print("   python tools/start_proxy.py")
    
    print("\n3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    print("   - gigachat-internal")
    print("   - gigachat-pro-internal")
    print("   - gigachat-max-internal")
    
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ curl:")
    curl_example = '''curl -X POST http://localhost:4000/v1/chat/completions \\
  -H "Content-Type: application/json" \\
  -H "Authorization: Bearer any-key" \\
  -d '{
    "model": "gigachat-internal",
    "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}]
  }'
'''
    print(curl_example)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    """
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GigaChat")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    load_dotenv()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    setup_internal_gigachat_environment()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    success = True
    success &= test_internal_header_manager()
    success &= test_internal_header_callback()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    show_configuration_info()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    demonstrate_openai_usage()
    demonstrate_litellm_usage()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
    show_proxy_startup_instructions()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ GigaChat –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md")
    print("   - –ü—Ä–∏–º–µ—Ä—ã: examples/")
    print("   - –¢–µ—Å—Ç—ã: tests/test_internal_gigachat.py")

if __name__ == "__main__":
    main()
