#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GigaChatTransformer –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
–º–µ–∂–¥—É —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ OpenAI –∏ GigaChat API.
"""

import asyncio
import json
from unittest.mock import Mock
from src.callbacks.content_handler import GigaChatTransformer


async def example_request_transformation():
    """–ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ OpenAI ‚Üí GigaChat"""
    print("=== –ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ OpenAI ‚Üí GigaChat ===")
    
    transformer = GigaChatTransformer(debug_mode=True)
    
    # –ü—Ä–∏–º–µ—Ä OpenAI –∑–∞–ø—Ä–æ—Å–∞ —Å –º–∞—Å—Å–∏–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ tools
    openai_request = {
        "model": "gigachat",
        "messages": [
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "–ü—Ä–∏–≤–µ—Ç! "},
                    {"type": "text", "text": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?"}
                ]
            }
        ],
        "tools": [
            {
                "type": "function",
                "function": {
                    "name": "get_weather",
                    "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "location": {
                                "type": "string",
                                "description": "–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã"
                            }
                        },
                        "required": ["location"]
                    }
                }
            }
        ],
        "tool_choice": "auto",
        "temperature": 0.7,
        "max_tokens": 150
    }
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–π OpenAI –∑–∞–ø—Ä–æ—Å:")
    print(json.dumps(openai_request, indent=2, ensure_ascii=False))
    
    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    transformed_request = await transformer.async_pre_call_hook(
        user_api_key_dict=Mock(),
        cache=Mock(),
        data=openai_request,
        call_type="completion"
    )
    
    print("\n–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π GigaChat –∑–∞–ø—Ä–æ—Å:")
    print(json.dumps(transformed_request, indent=2, ensure_ascii=False))
    
    return transformed_request


def example_response_transformation():
    """–ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ GigaChat ‚Üí OpenAI"""
    print("\n=== –ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ GigaChat ‚Üí OpenAI ===")
    
    transformer = GigaChatTransformer(debug_mode=True)
    
    # –°–æ–∑–¥–∞–µ–º mock –æ—Ç–≤–µ—Ç–∞ GigaChat —Å function_call
    mock_function_call = Mock()
    mock_function_call.name = "get_weather"
    mock_function_call.arguments = {"location": "–ú–æ—Å–∫–≤–∞"}
    
    mock_message = Mock()
    mock_message.role = "assistant"
    mock_message.content = None
    mock_message.function_call = mock_function_call
    
    mock_choice = Mock()
    mock_choice.message = mock_message
    
    mock_usage = Mock()
    mock_usage.prompt_tokens = 25
    mock_usage.completion_tokens = 10
    mock_usage.total_tokens = 35
    
    mock_gigachat_response = Mock()
    mock_gigachat_response.choices = [mock_choice]
    mock_gigachat_response.usage = mock_usage
    mock_gigachat_response.model = "GigaChat-Pro"
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–π GigaChat –æ—Ç–≤–µ—Ç (mock):")
    print(f"- model: {mock_gigachat_response.model}")
    print(f"- message.role: {mock_message.role}")
    print(f"- message.content: {mock_message.content}")
    print(f"- message.function_call.name: {mock_function_call.name}")
    print(f"- message.function_call.arguments: {mock_function_call.arguments}")
    print(f"- usage: {mock_usage.prompt_tokens}/{mock_usage.completion_tokens}/{mock_usage.total_tokens}")
    
    # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    openai_response = transformer._transform_gigachat_response_to_openai(mock_gigachat_response)
    
    print("\n–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π OpenAI –æ—Ç–≤–µ—Ç:")
    print(json.dumps(openai_response, indent=2, ensure_ascii=False))
    
    return openai_response


def example_content_flattening():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ===")
    
    transformer = GigaChatTransformer(debug_mode=True)
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–∞—Å—Å–∏–≤–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    test_cases = [
        # –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        ["–ü—Ä–∏–≤–µ—Ç, ", "–∫–∞–∫ –¥–µ–ª–∞?"],
        
        # –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
        [
            {"type": "text", "text": "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–æ "},
            {"type": "text", "text": "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"}
        ],
        
        # –°–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
        [
            "–í–æ–ø—Ä–æ—Å: ",
            {"type": "text", "text": "–ß—Ç–æ —Ç–∞–∫–æ–µ "},
            {"text": "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?"}
        ],
        
        # –ú–∞—Å—Å–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        [
            {"type": "text", "text": "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: "},
            {"type": "image_url", "image_url": {"url": "https://example.com/image.jpg"}}
        ]
    ]
    
    for i, content_array in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç {i}:")
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: {content_array}")
        
        flattened = transformer._flatten_content_array(content_array)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{flattened}'")


def example_tools_transformation():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è tools –≤ functions"""
    print("\n=== –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è tools –≤ functions ===")
    
    transformer = GigaChatTransformer(debug_mode=True)
    
    # OpenAI tools
    openai_tools = [
        {
            "type": "function",
            "function": {
                "name": "get_weather",
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "location": {
                            "type": "string",
                            "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
                        },
                        "unit": {
                            "type": "string",
                            "enum": ["celsius", "fahrenheit"],
                            "description": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"
                        }
                    },
                    "required": ["location"]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "calculate",
                "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "expression": {
                            "type": "string",
                            "description": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
                        }
                    },
                    "required": ["expression"]
                }
            }
        }
    ]
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–µ OpenAI tools:")
    print(json.dumps(openai_tools, indent=2, ensure_ascii=False))
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ GigaChat functions
    gigachat_functions = transformer._transform_tools_to_functions(openai_tools)
    
    print("\n–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ GigaChat functions:")
    print(json.dumps(gigachat_functions, indent=2, ensure_ascii=False))


def example_stats():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    print("\n=== –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ===")
    
    transformer = GigaChatTransformer(debug_mode=True)
    
    print("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    stats = transformer.get_stats()
    print(json.dumps(stats, indent=2, ensure_ascii=False))
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    transformer.processed_requests = 5
    transformer.conversion_stats['total_messages'] = 12
    transformer.conversion_stats['converted_messages'] = 8
    transformer.conversion_stats['errors'] = 1
    
    print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    stats = transformer.get_stats()
    print(json.dumps(stats, indent=2, ensure_ascii=False))
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    transformer.reset_stats()
    
    print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:")
    stats = transformer.get_stats()
    print(json.dumps(stats, indent=2, ensure_ascii=False))


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GigaChatTransformer")
    print("=" * 60)
    
    # –ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    await example_request_transformation()
    
    # –ü—Ä–∏–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    example_response_transformation()
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    example_content_flattening()
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è tools
    example_tools_transformation()
    
    # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    example_stats()
    
    print("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
