"""
–ö–æ–º–∞–Ω–¥–∞ token-info –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ.
"""

import click
import json
import logging
import sys
from datetime import datetime
from dotenv import load_dotenv

from ..utils import format_table
from ...core.token_manager import get_global_token_manager


logger = logging.getLogger(__name__)


def get_token_information() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ."""
    try:
        token_manager = get_global_token_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_info = token_manager.get_token_info()
        
        if not token_info:
            return {"error": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        result = {
            "–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞": "–ê–∫—Ç–∏–≤–µ–Ω" if token_info.get("access_token") else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
            "–¢–∏–ø —Ç–æ–∫–µ–Ω–∞": token_info.get("token_type", "Bearer"),
            "–û–±–ª–∞—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è": token_info.get("scope", "GIGACHAT_API_PERS"),
        }
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
        if "expires_at" in token_info:
            expires_at = token_info["expires_at"]
            if isinstance(expires_at, str):
                try:
                    expires_at = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
                except ValueError:
                    expires_at = expires_at
            
            if isinstance(expires_at, datetime):
                result["–ò—Å—Ç–µ–∫–∞–µ—Ç"] = expires_at.strftime("%Y-%m-%d %H:%M:%S UTC")
                
                # –í—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                now = datetime.now(expires_at.tzinfo) if expires_at.tzinfo else datetime.now()
                time_left = expires_at - now
                
                if time_left.total_seconds() > 0:
                    hours = int(time_left.total_seconds() // 3600)
                    minutes = int((time_left.total_seconds() % 3600) // 60)
                    result["–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏"] = f"{hours}—á {minutes}–º"
                    result["–°—Ç–∞—Ç—É—Å"] = "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
                else:
                    result["–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏"] = "–ò—Å—Ç–µ–∫"
                    result["–°—Ç–∞—Ç—É—Å"] = "–ò—Å—Ç–µ–∫"
            else:
                result["–ò—Å—Ç–µ–∫–∞–µ—Ç"] = str(expires_at)
        
        if "expires_in" in token_info:
            expires_in = token_info["expires_in"]
            result["–í—Ä–µ–º—è –∂–∏–∑–Ω–∏"] = f"{expires_in} —Å–µ–∫—É–Ω–¥"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        if "created_at" in token_info:
            created_at = token_info["created_at"]
            if isinstance(created_at, str):
                try:
                    created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                    result["–°–æ–∑–¥–∞–Ω"] = created_at.strftime("%Y-%m-%d %H:%M:%S UTC")
                except ValueError:
                    result["–°–æ–∑–¥–∞–Ω"] = str(created_at)
            else:
                result["–°–æ–∑–¥–∞–Ω"] = str(created_at)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if logger.isEnabledFor(logging.DEBUG):
            result["Debug: Token preview"] = token_info.get("access_token", "")[:20] + "..."
            result["Debug: Raw expires_in"] = str(token_info.get("expires_in", "N/A"))
            result["Debug: Raw scope"] = str(token_info.get("scope", "N/A"))
        
        return result
        
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: {exc}")
        logger.debug("Token info error details:", exc_info=True)
        return {"error": f"–û—à–∏–±–∫–∞: {exc}"}


def get_environment_info() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏."""
    import os
    
    env_info = {}
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è GigaChat
    gigachat_vars = [
        "GIGACHAT_AUTH_KEY",
        "GIGACHAT_BASE_URL", 
        "GIGACHAT_SCOPE",
        "GIGACHAT_VERIFY_SSL_CERTS"
    ]
    
    for var in gigachat_vars:
        value = os.getenv(var)
        if value:
            if var == "GIGACHAT_AUTH_KEY":
                # –ú–∞—Å–∫–∏—Ä—É–µ–º –∫–ª—é—á
                env_info[var] = f"{value[:10]}...{value[-4:]}" if len(value) > 14 else "***"
            else:
                env_info[var] = value
        else:
            env_info[var] = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    
    return env_info


@click.command()
@click.option(
    '--format',
    type=click.Choice(['json', 'table']),
    default='table',
    help='–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ [default: table]'
)
@click.pass_context
def token_info(ctx, format):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–∫–µ–Ω–µ."""
    
    verbose = ctx.obj.get('verbose', False)
    debug = ctx.obj.get('debug', False)
    
    if debug:
        click.echo(f"üîç Debug mode enabled")
        click.echo(f"üîç Verbose mode: {verbose}")
        click.echo(f"üîç Output format: {format}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
        token_data = get_token_information()
        
        if "error" in token_data:
            click.echo(f"‚ùå {token_data['error']}", err=True)
            sys.exit(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        env_data = get_environment_info()
        
        if format == 'json':
            # JSON —Ñ–æ—Ä–º–∞—Ç
            output = {
                "token_info": token_data,
                "environment": env_data,
                "timestamp": datetime.now().isoformat()
            }
            click.echo(json.dumps(output, ensure_ascii=False, indent=2))
            
        else:
            # –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if not debug:
                click.echo("üîë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ GigaChat")
                click.echo("=" * 40)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
            click.echo(format_table(token_data, "–¢–æ–∫–µ–Ω"))
            
            if verbose or debug:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
                click.echo(format_table(env_data, "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"))
            
            # –°—Ç–∞—Ç—É—Å
            status = token_data.get("–°—Ç–∞—Ç—É—Å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            if status == "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω":
                click.echo("\n‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            elif status == "–ò—Å—Ç–µ–∫":
                click.echo("\n‚ö†Ô∏è  –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                click.echo("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: litellm-gigachat refresh-token")
            else:
                click.echo(f"\n‚ùì –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {status}")
    
    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã token-info: {exc}")
        if debug:
            logger.debug("Token-info command error details:", exc_info=True)
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}", err=True)
        sys.exit(1)
