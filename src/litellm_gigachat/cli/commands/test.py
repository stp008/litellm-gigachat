"""
–ö–æ–º–∞–Ω–¥–∞ test –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat.
"""

import click
import logging
import os
import sys
import time
from dotenv import load_dotenv

from ..utils import check_environment_variables
from ...core.token_manager import get_global_token_manager


logger = logging.getLogger(__name__)


def test_environment() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_vars = check_environment_variables()
    
    for var, status in env_vars.items():
        if "‚úì" in status:
            logger.info(f"  ‚úì {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            logger.error(f"  ‚úó {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if "‚úó" in env_vars.get("GIGACHAT_AUTH_KEY", ""):
        logger.error("GIGACHAT_AUTH_KEY –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã")
        return False
    
    return True


def test_token_manager() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TokenManager."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TokenManager...")
    
    try:
        token_manager = get_global_token_manager()
        logger.debug(f"TokenManager type: {type(token_manager)}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        logger.info("  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
        start_time = time.time()
        token = token_manager.get_token()
        end_time = time.time()
        
        if token:
            logger.info(f"  ‚úì –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∑–∞ {end_time - start_time:.2f}s")
            logger.debug(f"  Token preview: {token[:20]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
            token_info = token_manager.get_token_info()
            if token_info:
                logger.info(f"  ‚úì –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {token_info.get('expires_at', 'unknown')}")
                logger.debug(f"  Token info: {token_info}")
            
            return True
        else:
            logger.error("  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return False
            
    except Exception as exc:
        logger.error(f"  ‚úó –û—à–∏–±–∫–∞ TokenManager: {exc}")
        logger.debug("TokenManager error details:", exc_info=True)
        return False


def test_gigachat_api() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat API —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat API...")
    
    try:
        import requests
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token_manager = get_global_token_manager()
        token = token_manager.get_token()
        
        if not token:
            logger.error("  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è API")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        logger.info("  –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        start_time = time.time()
        
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "GigaChat:latest",
            "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."}],
            "max_tokens": 100
        }
        
        response = requests.post(
            "https://gigachat.devices.sberbank.ru/api/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=30
        )
        
        end_time = time.time()
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"  ‚úì API –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ {end_time - start_time:.2f}s")
            
            if result.get("choices"):
                content = result["choices"][0]["message"]["content"]
                logger.info(f"  ‚úì –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {content[:100]}...")
                logger.debug(f"  Full response: {result}")
                return True
            else:
                logger.error("  ‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                logger.debug(f"  Response: {result}")
                return False
        else:
            logger.error(f"  ‚úó API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}")
            logger.debug(f"  Response: {response.text}")
            return False
            
    except Exception as exc:
        logger.error(f"  ‚úó –û—à–∏–±–∫–∞ GigaChat API: {exc}")
        logger.debug("GigaChat API error details:", exc_info=True)
        return False


def test_litellm_integration() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LiteLLM."""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LiteLLM...")
    
    try:
        import litellm
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º LiteLLM –¥–ª—è GigaChat
        logger.info("  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LiteLLM...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token_manager = get_global_token_manager()
        token = token_manager.get_token()
        
        if not token:
            logger.error("  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è LiteLLM")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ LiteLLM
        logger.info("  –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ LiteLLM...")
        start_time = time.time()
        
        response = litellm.completion(
            model="gigachat/GigaChat:latest",
            messages=[{"role": "user", "content": "–¢–µ—Å—Ç LiteLLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"}],
            api_key=token,
            api_base="https://gigachat.devices.sberbank.ru/api/v1"
        )
        
        end_time = time.time()
        
        if response and response.choices:
            logger.info(f"  ‚úì LiteLLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ {end_time - start_time:.2f}s")
            
            content = response.choices[0].message.content
            logger.info(f"  ‚úì –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LiteLLM: {content[:100]}...")
            logger.debug(f"  LiteLLM response: {response}")
            
            return True
        else:
            logger.error("  ‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LiteLLM")
            logger.debug(f"  LiteLLM response: {response}")
            return False
            
    except Exception as exc:
        logger.error(f"  ‚úó –û—à–∏–±–∫–∞ LiteLLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {exc}")
        logger.debug("LiteLLM integration error details:", exc_info=True)
        return False


@click.command()
@click.option(
    '--timeout',
    type=int,
    default=30,
    help='–¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö [default: 30]'
)
@click.pass_context
def test(ctx, timeout):
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat."""
    
    verbose = ctx.obj.get('verbose', False)
    debug = ctx.obj.get('debug', False)
    
    if debug:
        click.echo(f"üîç Debug mode enabled")
        click.echo(f"üîç Verbose mode: {verbose}")
        click.echo(f"üîç Timeout: {timeout}s")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    if not debug:
        click.echo("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat")
        click.echo("=" * 40)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("TokenManager", test_token_manager),
        ("GigaChat API", test_gigachat_api),
        ("LiteLLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_litellm_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        if not debug:
            click.echo(f"\nüìã {test_name}:")
        
        try:
            if test_func():
                passed += 1
                if not verbose and not debug:
                    click.echo(f"  ‚úì –ü—Ä–æ–π–¥–µ–Ω")
            else:
                if not verbose and not debug:
                    click.echo(f"  ‚úó –ü—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as exc:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ '{test_name}': {exc}")
            if debug:
                logger.debug(f"Test error details:", exc_info=True)
            if not verbose and not debug:
                click.echo(f"  ‚úó –û—à–∏–±–∫–∞: {exc}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if not debug:
        click.echo("\n" + "=" * 40)
        click.echo(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        click.echo(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        click.echo(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        if not debug:
            click.echo("  üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        logger.info("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    else:
        if not debug:
            click.echo("  ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        logger.error(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}")
        sys.exit(1)
