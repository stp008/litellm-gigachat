#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ LiteLLM –ø—Ä–æ–∫—Å–∏‚Äë—Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ GigaChat.

üí° –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∏—é–ª—å‚ÄØ2025)
-----------------------------------
* –ü–∞–∫–µ—Ç `litellm` –±–æ–ª—å—à–µ **–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç** `__main__.py`, –ø–æ—ç—Ç–æ–º—É `python -m litellm` –∏
  `python -m litellm.proxy` –±—Ä–æ—Å–∞—é—Ç –æ—à–∏–±–∫—É.
* –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è **CLI‚Äë—Å–∫—Ä–∏–ø—Ç** `litellm`, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–≤–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å
  `litellm[proxy]` –∏ —É–º–µ–µ—Ç –ø–æ–¥–Ω–∏–º–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.
* –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–±–æ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ –∏ –º–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏.
"""

from __future__ import annotations

import argparse
import logging
import os
import subprocess
import sys
from importlib import metadata
from pathlib import Path
import certifi
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def check_environment() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    if "GIGACHAT_AUTH_KEY" not in os.environ:
        logger.error(
            "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GIGACHAT_AUTH_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n"
            "export GIGACHAT_AUTH_KEY='–≤–∞—à_authorization_key'",
        )
        return False

    logger.info("‚úì GIGACHAT_AUTH_KEY –Ω–∞–π–¥–µ–Ω")
    return True


def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    try:
        import litellm  # noqa: F401 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        logger.info("‚úì LiteLLM –≤–µ—Ä—Å–∏—è: %s", metadata.version("litellm"))
    except ImportError:
        logger.error("LiteLLM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install 'litellm[proxy]'")
        return False

    try:
        import requests  # noqa: F401
        logger.info("‚úì Requests —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        logger.error("Requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests")
        return False

    return True


def setup_certificates() -> bool:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ—Ä–Ω–µ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ certifi
        cert_file = certifi.where()
        logger.info("–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ certifi: %s", cert_file)
        
        # URL —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        cert_url = "https://gu-st.ru/content/lending/russian_trusted_root_ca_pem.crt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        try:
            with open(cert_file, 'r', encoding='utf-8') as f:
                cert_content = f.read()
                if "Russian Trusted Root CA" in cert_content or "gu-st.ru" in cert_content:
                    logger.info("‚úì –†–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
        except Exception as read_exc:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: %s", read_exc)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
        
        cmd = [
            "curl", "-k", cert_url, "-w", "\\n"
        ]
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º curl –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            result = subprocess.run(cmd, capture_output=True, text=True, check=True, timeout=30)
            cert_data = result.stdout.strip()
            
            if not cert_data or "BEGIN CERTIFICATE" not in cert_data:
                logger.error("–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ —Ñ–∞–π–ª certifi
            with open(cert_file, 'a', encoding='utf-8') as f:
                f.write('\n')
                f.write('# Russian Trusted Root CA (added by litellm-gigachat)\n')
                f.write(cert_data)
                f.write('\n')
            
            logger.info("‚úì –†–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
            
        except subprocess.TimeoutExpired:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
            return False
        except subprocess.CalledProcessError as proc_exc:
            logger.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è curl: %s", proc_exc)
            return False
        except PermissionError:
            logger.error("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: %s", cert_file)
            return False
        except Exception as write_exc:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: %s", write_exc)
            return False
            
    except Exception as exc:  # pylint: disable=broad-except
        logger.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: %s", exc)
        return False


def setup_gigachat_integration() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π GigaChat –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏."""
    try:
        # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        # Callback –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ config.yml
        from ..callbacks.token_callback import get_gigachat_callback
        from ..core.token_manager import get_global_token_manager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ token manager —Ä–∞–±–æ—Ç–∞–µ—Ç
        token_manager = get_global_token_manager()
        logger.info("‚úì –ú–æ–¥—É–ª–∏ GigaChat –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        logger.info("‚úì Token manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as exc:  # pylint: disable=broad-except
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: %s", exc)
        return False


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def start_proxy_server(
    host: str = "0.0.0.0",
    port: int = 4000,
    config_file: str = "../config.yml",
) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç LiteLLM Proxy, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ."""

    if not Path(config_file).exists():
        logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω!", config_file)
        return False

    logger.info("–ó–∞–ø—É—Å–∫ LiteLLM –ø—Ä–æ–∫—Å–∏‚Äë—Å–µ—Ä–≤–µ—Ä–∞‚Ä¶")
    logger.info("  Host: %s", host)
    logger.info("  Port: %s", port)
    logger.info("  Config: %s", config_file)

    # –ö–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º CLI‚Äë—Å–∫—Ä–∏–ø—Ç `litellm`
    cmd: list[str] = [
        "litellm",  # console‚Äëscript, –ø–æ–ø–∞–¥–∞—é—â–∏–π –≤ venv/bin
        "--config",
        config_file,
        "--host",
        host,
        "--port",
        str(port),
        "--detailed_debug",
    ]

    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: %s", " ".join(cmd))

    try:
        subprocess.run(cmd, check=True)
        return True
    except subprocess.CalledProcessError as exc:
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏‚Äë—Å–µ—Ä–≤–µ—Ä–∞: %s", exc)
        return False
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É‚Ä¶")
        return True


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main() -> None:  # noqa: D401 ‚Äî imperative
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–æ–∫—Å–∏‚Äë—Å–µ—Ä–≤–µ—Ä."""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description="LiteLLM –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è GigaChat API",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  litellm-gigachat                                    # –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  litellm-gigachat --host 127.0.0.1 --port 8000      # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç
  litellm-gigachat --config my_config.yml             # –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
    )
    
    parser.add_argument(
        "--host",
        default="0.0.0.0",
        help="–•–æ—Å—Ç –¥–ª—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)"
    )
    
    parser.add_argument(
        "--port",
        type=int,
        default=4000,
        help="–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4000)"
    )
    
    parser.add_argument(
        "--config",
        default="../config.yml",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config.yml)"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version="litellm-gigachat 0.1.1"
    )
    
    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    load_dotenv()

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ LiteLLM –ø—Ä–æ–∫—Å–∏‚Äë—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è GigaChat")
    logger.info("=" * 50)

    if not (check_environment() and check_dependencies() and setup_certificates() and setup_gigachat_integration()):
        sys.exit(1)

    logger.info("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞‚Ä¶")
    logger.info("=" * 50)

    if start_proxy_server(host=args.host, port=args.port, config_file=args.config):
        logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    else:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞")
        sys.exit(1)


if __name__ == "__main__":
    main()
